/* jshint ignore:start */

/* jshint ignore:end */

define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  var App;

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;
  var registered = false;

  exports['default'] = {
    name: 'App Version',
    initialize: function initialize(container, application) {
      if (!registered) {
        var appName = classify(application.toString());
        Ember['default'].libraries.register(appName, config['default'].APP.version);
        registered = true;
      }
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {
      window[classifiedName] = application;
    }
  }

  ;

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  exports['default'] = Router.map(function () {});

});
define('dummy/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.11.1",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"id","title");
        var el2 = dom.createTextNode("Welcome to Ember.js");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        content(env, morph0, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('app.js should pass jshint', function() { 
    ok(true, 'app.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/resolver.js should pass jshint', function() { 
    ok(true, 'helpers/resolver.js should pass jshint.'); 
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  module('JSHint - helpers');
  test('helpers/start-app.js should pass jshint', function() { 
    ok(true, 'helpers/start-app.js should pass jshint.'); 
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('router.js should pass jshint', function() { 
    ok(true, 'router.js should pass jshint.'); 
  });

});
define('dummy/tests/runner', function () {

  'use strict';

  /*jshint globalstrict: true*/
  'use strict';

  var glob = require('glob');
  var Mocha = require('mocha');

  var mocha = new Mocha({
    reporter: 'spec'
  });

  var arg = process.argv[2];
  var root = 'tests/';

  function addFiles(mocha, files) {
    glob.sync(root + files).forEach(mocha.addFile.bind(mocha));
  }

  addFiles(mocha, '/**/*-nodetest.js');

  if (arg === 'all') {
    addFiles(mocha, '/**/*-nodetest-slow.js');
  }

  mocha.run(function (failures) {
    process.on('exit', function () {
      process.exit(failures);
    });
  });

});
define('dummy/tests/runner.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('runner.js should pass jshint', function() { 
    ok(true, 'runner.js should pass jshint.'); 
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  module('JSHint - .');
  test('test-helper.js should pass jshint', function() { 
    ok(true, 'test-helper.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/index-nodetest', function () {

  'use strict';

  /*jshint globalstrict: true*/
  'use strict';

  var RSVP = require('ember-cli/lib/ext/promise');

  var assert = require('ember-cli/tests/helpers/assert');

  describe('build plugin', function () {
    var subject;

    before(function () {
      subject = require('../../index');
    });

    it('has a name', function () {
      var result = subject.createDeployPlugin({
        name: 'test-plugin'
      });

      assert.equal(result.name, 'test-plugin');
    });

    it('implements the correct hooks', function () {
      var result = subject.createDeployPlugin({
        name: 'test-plugin'
      });

      assert.equal(typeof result.willDeploy, 'function');
      assert.equal(typeof result.build, 'function');
    });

    describe('willDeploy hook', function () {
      it('resolves if config is ok', function () {
        var plugin = subject.createDeployPlugin({
          name: 'build'
        });

        var context = {
          deployment: {
            ui: { write: function write() {}, writeLine: function writeLine() {} },
            config: {}
          }
        };
        return assert.isFulfilled(plugin.willDeploy.call(plugin, context));
      });
    });

    describe('build hook', function () {
      var plugin;
      var context;

      beforeEach(function () {
        plugin = subject.createDeployPlugin({
          name: 'build'
        });

        context = {
          redisClient: {
            upload: function upload() {
              return RSVP.resolve('redis-key');
            }
          },
          tag: 'some-tag',
          deployment: {
            ui: { write: function write() {}, writeLine: function writeLine() {} },
            project: { name: function name() {
                return 'test-project';
              }, addons: [], root: 'tests/dummy' },
            config: {
              build: {
                buildEnv: 'development',
                buildPath: 'tmp/dist-deploy' }
            }
          }
        };
      });

      it('builds the app and returns distDir and distFiles', function (done) {
        this.timeout(50000);
        return assert.isFulfilled(plugin.build.call(plugin, context)).then(function (result) {
          assert.deepEqual(result, {
            distDir: 'dist',
            distFiles: ['assets/dummy.css', 'assets/dummy.js', 'assets/dummy.map', 'assets/ember-data.js.map', 'assets/failed.png', 'assets/passed.png', 'assets/test-loader.js', 'assets/test-support.css', 'assets/test-support.js', 'assets/test-support.map', 'assets/vendor.css', 'assets/vendor.js', 'assets/vendor.map', 'crossdomain.xml', 'index.html', 'robots.txt', 'testem.js', 'tests/index.html']
          });
          done();
        })['catch'](function (reason) {
          console.log(reason.actual.stack);
          done(reason.actual);
        });
      });
    });
  });

});
define('dummy/tests/unit/index-nodetest.jshint', function () {

  'use strict';

  module('JSHint - unit');
  test('unit/index-nodetest.js should pass jshint', function() { 
    ok(true, 'unit/index-nodetest.js should pass jshint.'); 
  });

});
define('dummy/tests/unit/lib/utilities/validate-config-nodetest', function () {

  'use strict';

  /* node:true */
  var assert = require('ember-cli/tests/helpers/assert');

  describe('validate-config', function () {
    var subject;
    var config;
    var mockUi;

    before(function () {
      subject = require('../../../../lib/utilities/validate-config');
    });

    beforeEach(function () {
      mockUi = {
        messages: [],
        write: function write() {},
        writeLine: function writeLine(message) {
          this.messages.push(message);
        }
      };
    });

    describe('without providing config', function () {
      beforeEach(function () {
        config = {};
      });
      it('warns about missing optional config', function () {
        return assert.isFulfilled(subject(mockUi, config)).then(function () {
          var messages = mockUi.messages.reduce(function (previous, current) {
            if (/- Missing config:\s.*, using default:\s/.test(current)) {
              previous.push(current);
            }

            return previous;
          }, []);

          assert.equal(messages.length, 2);
        });
      });

      it('adds default config to the config object', function () {
        return assert.isFulfilled(subject(mockUi, config)).then(function () {
          assert.isDefined(config.buildEnv);
          assert.isDefined(config.buildPath);
        });
      });

      it('resolves', function () {
        return assert.isFulfilled(subject(mockUi, config));
      });
    });

    describe('with a buildEnv and buildPath provided', function () {
      beforeEach(function () {
        config = {
          buildEnv: 'development',
          buildPath: 'tmp/dist-deploy'
        };
      });
      it('does not warns about missing optional config', function () {
        return assert.isFulfilled(subject(mockUi, config)).then(function () {
          var messages = mockUi.messages.reduce(function (previous, current) {
            if (/- Missing config:\s.*, using default:\s/.test(current)) {
              previous.push(current);
            }

            return previous;
          }, []);

          assert.equal(messages.length, 0);
        });
      });

      it('resolves', function () {
        return assert.isFulfilled(subject(mockUi, config));
      });
    });
  });

});
define('dummy/tests/unit/lib/utilities/validate-config-nodetest.jshint', function () {

  'use strict';

  module('JSHint - unit/lib/utilities');
  test('unit/lib/utilities/validate-config-nodetest.js should pass jshint', function() { 
    ok(true, 'unit/lib/utilities/validate-config-nodetest.js should pass jshint.'); 
  });

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"name":"ember-cli-deploy-build","version":"0.1.0.ece39bd8"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map