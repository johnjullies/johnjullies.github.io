{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/templates/application.js","dummy/tests/app.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/router.jshint.js","dummy/tests/runner.js","dummy/tests/runner.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/index-nodetest.js","dummy/tests/unit/index-nodetest.jshint.js","dummy/tests/unit/lib/utilities/validate-config-nodetest.js","dummy/tests/unit/lib/utilities/validate-config-nodetest.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  exports['default'] = Router.map(function () {});\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Welcome to Ember.js\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/router', 'dummy/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/runner', function () {\n\n  'use strict';\n\n  /*jshint globalstrict: true*/\n  'use strict';\n\n  var glob = require('glob');\n  var Mocha = require('mocha');\n\n  var mocha = new Mocha({\n    reporter: 'spec'\n  });\n\n  var arg = process.argv[2];\n  var root = 'tests/';\n\n  function addFiles(mocha, files) {\n    glob.sync(root + files).forEach(mocha.addFile.bind(mocha));\n  }\n\n  addFiles(mocha, '/**/*-nodetest.js');\n\n  if (arg === 'all') {\n    addFiles(mocha, '/**/*-nodetest-slow.js');\n  }\n\n  mocha.run(function (failures) {\n    process.on('exit', function () {\n      process.exit(failures);\n    });\n  });\n\n});","define('dummy/tests/runner.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('runner.js should pass jshint', function() { \n    ok(true, 'runner.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/index-nodetest', function () {\n\n  'use strict';\n\n  /*jshint globalstrict: true*/\n  'use strict';\n\n  var RSVP = require('ember-cli/lib/ext/promise');\n\n  var assert = require('ember-cli/tests/helpers/assert');\n\n  describe('build plugin', function () {\n    var subject;\n\n    before(function () {\n      subject = require('../../index');\n    });\n\n    it('has a name', function () {\n      var result = subject.createDeployPlugin({\n        name: 'test-plugin'\n      });\n\n      assert.equal(result.name, 'test-plugin');\n    });\n\n    it('implements the correct hooks', function () {\n      var result = subject.createDeployPlugin({\n        name: 'test-plugin'\n      });\n\n      assert.equal(typeof result.willDeploy, 'function');\n      assert.equal(typeof result.build, 'function');\n    });\n\n    describe('willDeploy hook', function () {\n      it('resolves if config is ok', function () {\n        var plugin = subject.createDeployPlugin({\n          name: 'build'\n        });\n\n        var context = {\n          deployment: {\n            ui: { write: function write() {}, writeLine: function writeLine() {} },\n            config: {}\n          }\n        };\n        return assert.isFulfilled(plugin.willDeploy.call(plugin, context));\n      });\n    });\n\n    describe('build hook', function () {\n      var plugin;\n      var context;\n\n      beforeEach(function () {\n        plugin = subject.createDeployPlugin({\n          name: 'build'\n        });\n\n        context = {\n          redisClient: {\n            upload: function upload() {\n              return RSVP.resolve('redis-key');\n            }\n          },\n          tag: 'some-tag',\n          deployment: {\n            ui: { write: function write() {}, writeLine: function writeLine() {} },\n            project: { name: function name() {\n                return 'test-project';\n              }, addons: [], root: 'tests/dummy' },\n            config: {\n              build: {\n                buildEnv: 'development',\n                buildPath: 'tmp/dist-deploy' }\n            }\n          }\n        };\n      });\n\n      it('builds the app and returns distDir and distFiles', function (done) {\n        this.timeout(50000);\n        return assert.isFulfilled(plugin.build.call(plugin, context)).then(function (result) {\n          assert.deepEqual(result, {\n            distDir: 'dist',\n            distFiles: ['assets/dummy.css', 'assets/dummy.js', 'assets/dummy.map', 'assets/ember-data.js.map', 'assets/failed.png', 'assets/passed.png', 'assets/test-loader.js', 'assets/test-support.css', 'assets/test-support.js', 'assets/test-support.map', 'assets/vendor.css', 'assets/vendor.js', 'assets/vendor.map', 'crossdomain.xml', 'index.html', 'robots.txt', 'testem.js', 'tests/index.html']\n          });\n          done();\n        })['catch'](function (reason) {\n          console.log(reason.actual.stack);\n          done(reason.actual);\n        });\n      });\n    });\n  });\n\n});","define('dummy/tests/unit/index-nodetest.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit');\n  test('unit/index-nodetest.js should pass jshint', function() { \n    ok(true, 'unit/index-nodetest.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/unit/lib/utilities/validate-config-nodetest', function () {\n\n  'use strict';\n\n  /* node:true */\n  var assert = require('ember-cli/tests/helpers/assert');\n\n  describe('validate-config', function () {\n    var subject;\n    var config;\n    var mockUi;\n\n    before(function () {\n      subject = require('../../../../lib/utilities/validate-config');\n    });\n\n    beforeEach(function () {\n      mockUi = {\n        messages: [],\n        write: function write() {},\n        writeLine: function writeLine(message) {\n          this.messages.push(message);\n        }\n      };\n    });\n\n    describe('without providing config', function () {\n      beforeEach(function () {\n        config = {};\n      });\n      it('warns about missing optional config', function () {\n        return assert.isFulfilled(subject(mockUi, config)).then(function () {\n          var messages = mockUi.messages.reduce(function (previous, current) {\n            if (/- Missing config:\\s.*, using default:\\s/.test(current)) {\n              previous.push(current);\n            }\n\n            return previous;\n          }, []);\n\n          assert.equal(messages.length, 2);\n        });\n      });\n\n      it('adds default config to the config object', function () {\n        return assert.isFulfilled(subject(mockUi, config)).then(function () {\n          assert.isDefined(config.buildEnv);\n          assert.isDefined(config.buildPath);\n        });\n      });\n\n      it('resolves', function () {\n        return assert.isFulfilled(subject(mockUi, config));\n      });\n    });\n\n    describe('with a buildEnv and buildPath provided', function () {\n      beforeEach(function () {\n        config = {\n          buildEnv: 'development',\n          buildPath: 'tmp/dist-deploy'\n        };\n      });\n      it('does not warns about missing optional config', function () {\n        return assert.isFulfilled(subject(mockUi, config)).then(function () {\n          var messages = mockUi.messages.reduce(function (previous, current) {\n            if (/- Missing config:\\s.*, using default:\\s/.test(current)) {\n              previous.push(current);\n            }\n\n            return previous;\n          }, []);\n\n          assert.equal(messages.length, 0);\n        });\n      });\n\n      it('resolves', function () {\n        return assert.isFulfilled(subject(mockUi, config));\n      });\n    });\n  });\n\n});","define('dummy/tests/unit/lib/utilities/validate-config-nodetest.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/lib/utilities');\n  test('unit/lib/utilities/validate-config-nodetest.js should pass jshint', function() { \n    ok(true, 'unit/lib/utilities/validate-config-nodetest.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-cli-deploy-build\",\"version\":\"0.1.0.ece39bd8\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}